#include <iostream>
#include <opencv2\core\core.hpp>
#include <opencv2\highgui\highgui.hpp>
#include <opencv2\opencv.hpp>
#include <opencv2\imgproc\imgproc.hpp>
#include <vector>
#include <opencv\cvaux.h>
#include <opencv\cv.h>
#include <opencv2\text.hpp>
#include <fstream>
#include <baseapi.h>
#include <leptonica\allheaders.h>
#include <string>
#include <stdlib.h>

using namespace cv;
using namespace std;

void connectIpCamera();
int readImage();
void convertGrayscale();
void morphologyOperate1();
void morphologyOperate2();
void dilationImage();
void binaryOtsuImage();
void findingContours();
void charBoundRect();
void textReading();
void grayscaleTo();
bool verifySize(RotatedRect rect);

VideoCapture capture;
Mat original_image;
Mat grayscaleimage;
Mat binary1,binary2, equalize;
Mat temp_img, sobelImage;
Mat binaryOtsu,plateCanditate,resultResized;
Mat morpho,resultMerge,binaryInverted;
Mat firstMerge,binaryMerged;
Mat histogramX, histogramY, binaryHistX, binaryCanditate;
Mat abs_dst, rectanglesImage;
Mat lapla, smooth,toZero;
Mat laplacian_image;
Mat digitRoi, katakana, rikuUnNum;


int main(int argc, char *argv[]){

	connectIpCamera();

	for (;;){

		readImage();

		convertGrayscale();

//		grayscaleTo();

//		countRowsCols();

//		morphologyOperate1();

//		morphologyOperate2();

//		dilationImage();

		binaryOtsuImage();

//	 	sobelOperate();

//		laplacian();

//		mergeImage();

		findingContours();

		if (waitKey(1) >= 0) break;

	}

	waitKey(0);

	destroyAllWindows();

	return 0;
}


void connectIpCamera(){

	string uname = "root";
	string password = "***";
	string ip_address = "http://" + uname + ":" + password + "@169.254.***.1/mjpg/video.mjpg";

	if (capture.open(ip_address) == false) {
		cout << "Cannot connect IP camera! Check Your Camera Connection." << endl;
		waitKey();
	}
}

int readImage(){
	if (capture.read(original_image) == false){
		return -1;
	}
}

void morphologyOperate1(){
	Mat morphoImage = imread("morphology_img.jpg");
	threshold(morphoImage, binary1, 170, 255, CV_THRESH_BINARY);
	bitwise_not(binary1,binaryInverted);
	imshow("binaryInverted", binaryInverted);
	imshow("binary1", binary1);
}

void morphologyOperate2(){
	Mat morphoImage = imread("morphology_img.jpg");
	threshold(morphoImage, binary2, 200, 255, CV_THRESH_BINARY);
	bitwise_not(binary2, binaryInverted);
	imshow("binaryInverted", binaryInverted);
	imshow("binary2", binary2);

}
void dilationImage(){
	
	int morph_size = 5;
	Mat element = getStructuringElement(MORPH_RECT, Size(2 * morph_size + 1, 2 * morph_size + 1), Point(morph_size, morph_size));
	morphologyEx(binaryMerged, morpho, MORPH_DILATE, element, Point(-1, -1));
	imshow("morpho", morpho);
//	imwrite("morphology_img.jpg", morpho);
}

void convertGrayscale(){

	cvtColor(original_image, grayscaleimage, CV_BGR2GRAY);
	equalizeHist(grayscaleimage, equalize);
//	imshow("gray image", grayscaleimage);
//	imshow("equalize", equalize);
}

void createSlidebarWindow() {

	namedWindow("hsv", 1);

	lowerHue = 0;
	lowerSatuation = 0;
	lowerRed = 0;

	createTrackbar("lower hue", "hsv", &lowerHue, 180);
	createTrackbar("lower satuation", "hsv", &lowerSatuation, 255);
	createTrackbar("lower red", "hsv", &lowerRed, 255);

	upperHue = 164;
	upperSatuation = 164;
	upperRed = 69;

	createTrackbar("upper hue", "hsv", &upperHue, 180);
	createTrackbar("upper satuation", "hsv", &upperSatuation, 255);
	createTrackbar("upper red", "hsv", &upperRed, 255);
}

void hsvImage(){
	
	Mat hsvImg;

	cvtColor(original_image, hsvImg, COLOR_BGR2HSV);

	Mat whiteNumberPlate,whiteMorph;
	Mat yellowNumberPlate;

	inRange(hsvImg, Scalar(lowerHue, lowerSatuation, lowerRed), Scalar(upperHue, upperSatuation, upperRed), whiteNumberPlate);
	inRange(hsvImg, Scalar(160, 100, 100), Scalar(179, 255, 255),yellowNumberPlate);
	
	double morph_size = 2.0;

	Mat element = getStructuringElement(MORPH_RECT, Size(2 * morph_size + 1, 2 * morph_size + 1), Point(morph_size, morph_size));
	morphologyEx(whiteNumberPlate, whiteMorph, MORPH_DILATE, element, Point(-1, -1));
	morphologyEx(whiteMorph, morpho, MORPH_ERODE, element, Point(-1, -1));
	//morphologyEx(whiteMorph, morpho, MORPH_OPEN, element, Point(-1, -1));
	imshow("morpho", morpho);

//	imwrite("morphology_img.jpg", morpho);
}

void grayscaleTo(){

	Mat grayscaleTo;

	cvtColor(grayscaleimage, grayscaleTo, CV_RGB2GRAY);

	int x;
	int y;
	int sumOfcolorNum;

	for (y = 0; y < grayscaleimage.rows; y++){

		for (x = 0; x < grayscaleimage.cols; x++){

			if (grayscaleimage.at<unsigned char>(y, x) > 50 && grayscaleimage.at<unsigned char>(y, x) < 80) {

				grayscaleimage.at<unsigned char>(y, x) = 255;

			}

			if (grayscaleimage.at<unsigned char>(y, x) > 115 && grayscaleimage.at<unsigned char>(y, x) < 160) {

				grayscaleimage.at<unsigned char>(y, x) = 255;

			}

		}
	}

	imshow("gray", grayscaleTo);

}

void binaryOtsuImage(){

//	threshold(equalize, binaryOtsu, 0,255,CV_THRESH_BINARY| CV_THRESH_TOZERO);
	threshold(equalize, binaryOtsu, 125, 255, CV_THRESH_BINARY);
	imshow("otsu", binaryOtsu);
}


class preOperation {

public:

	void laplacian() {
		Laplacian(sobelImage, lapla, CV_16S, 3, 1, 0, BORDER_DEFAULT);
		convertScaleAbs(lapla, abs_dst);
		//	imshow("laplacian", abs_dst);
	}

	void mergeImage() {
	Mat firstMerge = binaryOtsu.clone();
	Mat resultMerge = (firstMerge | sobelImage);
	threshold(resultMerge, binaryMerged, 0, 255, CV_THRESH_BINARY | CV_THRESH_TRIANGLE);
	imshow("merged_image", binaryMerged);
}

	void sobelOperate() {

	Mat sobelImageX, sobelImageY;

	Sobel(equalize, temp_img, CV_16S, 1, 0, 1, 3, 5, BORDER_CONSTANT);
	convertScaleAbs(temp_img, sobelImageX, 1, 1);

	Sobel(equalize, temp_img, CV_16S, 0, 1, 1, 3, 5, BORDER_CONSTANT);
	convertScaleAbs(temp_img, sobelImageY, 1, 1);

	addWeighted(sobelImageX, 0.4, sobelImageY, 0.4, 0, sobelImage);

	//	imshow("sobel", sobelImage);
}


};

bool verifySize(RotatedRect rect){

	float rotatedAspectRatio = (float)rect.size.width / (float)rect.size.height;
	float angles = rect.angle;
	float r = (float)rect.size.width / (float)rect.size.height;

	if (rect.size.width > 25 && rect.size.height > 25.0){

		return true;
	}

	else{
		return false;
	}


}

void findingContours(){

		Mat canny_src = binaryOtsu;
		Mat canny_output;

		Canny(canny_src, canny_output, 255, 3, 3);

		Mat minAreaImage = Mat::ones(canny_output.size(), CV_8SC3);
		canny_output.copyTo(minAreaImage);

		imshow("canny_image", minAreaImage);

		vector<vector<Point> > contours;

		// Find contours
		
		findContours(minAreaImage, contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, Point(0, 0));

		vector<RotatedRect> minRect(contours.size());
	

/*		vector<vector<Point> >::iterator itl = contours.begin();

		while (itl != contours.end()){
			RotatedRect rect = minAreaRect(Mat(*itl));
			if (!verifySize(rect)){
				itl = contours.erase(itl);
			}
			else{
				++itl;
				minRect.push_back(rect);
			}

		} */

		rectanglesImage = original_image.clone();

		const Scalar color = Scalar(255, 255, 0);


		for (size_t i = 0; i < contours.size(); i++){


		    minRect[i] = minAreaRect(Mat(contours[i]));
		
			float rotatedAspectRatio = (float)minRect[i].size.width / (float)minRect[i].size.height;
			float angles = minRect[i].angle;
			float r = (float)minRect[i].size.width / (float)minRect[i].size.height;

			if (minRect[i].size.width > 25 && minRect[i].size.height > 50.0 && rotatedAspectRatio > 0.4  && rotatedAspectRatio < 0.6 && minRect[i].angle < -75.0){

			//	cout << "Angle : " << angles << endl;

				Point2f rect_points[4]; minRect[i].points(rect_points);

				if (angles < 45.0){
					angles += 90.0;
				}

				//	cout << rotatedAspectRatio << "--" << angles << endl;

				Mat rotmat = getRotationMatrix2D(minRect[i].center, angles, 1);

				//Create and rotate image
				Mat img_rotated;
				warpAffine(grayscaleimage, img_rotated, rotmat, grayscaleimage.size(), CV_INTER_CUBIC);

				//Crop image
				Size rect_size = minRect[i].size;
				if (r < 1)
					swap(rect_size.width, rect_size.height);

				Mat img_crop;
				getRectSubPix(img_rotated, rect_size, minRect[i].center, img_crop);

				plateCanditate.create(100, 200, CV_8UC3);
				resize(img_crop, plateCanditate, plateCanditate.size(), 0, 0, INTER_CUBIC);

			//	GaussianBlur(resultResized, plateCanditate, Size(1, 1), 0);
				threshold(plateCanditate, binaryCanditate, 0, 255, CV_THRESH_OTSU | CV_THRESH_TOZERO);

				int xx, xy;

				float averageX, blackPixelRtioX;

			//	Mat histogramX = Mat(Size(plateCanditate.cols, plateCanditate.rows), CV_8UC3, Scalar(255, 255, 255));

				float sumX = 0;

				for (xx = 0; xx < binaryCanditate.cols; xx++){

					int blackX = 0;

					for (xy = 0; xy < binaryCanditate.rows; xy++){

						int intensity = binaryCanditate.at<uchar>(Point(xx, xy));
						if (intensity == 0){

							blackX += 1;

						}
					}

		//			line(histogramX, Point(xx, 0), Point(xx, blackX), Scalar(255, 0, 0), 1);
					sumX += blackX;
				}

				averageX = (float)sumX / plateCanditate.cols;
				blackPixelRtioX = (float)(averageX / plateCanditate.cols) * 100;

			//	    cout << averageX << "(" << blackPixelRtioX << " % )" << endl;

					if (blackPixelRtioX > 8.5 && blackPixelRtioX < 13.5){

					int yx, yy;

					float averageY, blackPixelRtioY;
				//	Mat histogramY = Mat(Size(plateCanditate.cols, plateCanditate.rows), CV_8UC3, Scalar(255, 255, 255));

					float sumY = 0;

					for (yy = 0; yy < binaryCanditate.rows; yy++){

						int blackY = 0;

						for (yx = 0; yx < binaryCanditate.cols; yx++){

							int intensity = binaryCanditate.at<uchar>(Point(yx, yy));
							if (intensity == 0){

								blackY += 1;

							}
						}

			//			line(histogramY, Point(0, yy), Point(blackY, yy), Scalar(255, 0, 0), 1);
						sumY += blackY;
					}

					averageY = (float)sumY / plateCanditate.cols;
					blackPixelRtioY = (float)(averageY / plateCanditate.cols) * 100.0;

					//cout << averageY << "(" << blackPixelRtioY << " % )" << endl;

					if (blackPixelRtioY > 10.0 && blackPixelRtioY < 12.5){

						for (int j = 0; j < 4; j++){

							line(rectanglesImage, rect_points[j], rect_points[(j + 1) % 4], color, 2, 8);
						}

						//	imshow("histogramX.jpg", histogramX);
						//	imshow("histogramY", histogramY);
							imshow("plateCanditate", plateCanditate);
						//	imshow("binaryCanditate", binaryCanditate);
							imwrite("plateCanditate.jpg", plateCanditate);
							imwrite("plateCanditateBinary.jpg", binaryCanditate);

						charBoundRect();

					}
				}


			}


			else if (minRect[i].size.width > 50.0 && minRect[i].size.height > 25.0 && rotatedAspectRatio > 1.80  && rotatedAspectRatio < 2.2 && minRect[i].angle > -15 ){

			//	cout << "Angle : " << angles << endl;

				Point2f rect_points[4]; minRect[i].points(rect_points);
				
				//	cout << rotatedAspectRatio << "--" << angles << endl;

					Mat rotmat = getRotationMatrix2D(minRect[i].center, angles, 1);

					//Create and rotate image
					Mat img_rotated;
					warpAffine(grayscaleimage, img_rotated, rotmat, grayscaleimage.size(), CV_INTER_CUBIC);

					//Crop image
					Size rect_size = minRect[i].size;
					if (r < 1)
						swap(rect_size.width, rect_size.height);

					Mat img_crop;
					getRectSubPix(img_rotated, rect_size, minRect[i].center, img_crop);

					plateCanditate.create(100, 200, CV_8UC3);
					resize(img_crop, plateCanditate, plateCanditate.size(), 0, 0, INTER_CUBIC);
					
					//GaussianBlur(resultResized, plateCanditate, Size(1, 1), 0);
					threshold(plateCanditate, binaryCanditate, 0, 255, CV_THRESH_OTSU | CV_THRESH_TOZERO);
					
					int xx, xy;

					float averageX, blackPixelRtioX;

				//	Mat histogramX = Mat(Size(plateCanditate.cols, plateCanditate.rows), CV_8UC3, Scalar(255, 255, 255));

					float sumX = 0;

					for (xx = 0; xx < binaryCanditate.cols; xx++){

						int blackX = 0;

						for (xy = 0; xy < binaryCanditate.rows; xy++){

							int intensity = binaryCanditate.at<uchar>(Point(xx, xy));
							if (intensity == 0){

								blackX += 1;

							}
						}

				//		line(histogramX, Point(xx, 0), Point(xx, blackX), Scalar(255, 0, 0), 1);
						sumX += blackX;
					}

					averageX = (float)sumX / plateCanditate.cols;
					blackPixelRtioX = (float)(averageX / plateCanditate.cols) * 100;

					if (blackPixelRtioX > 8.5 && blackPixelRtioX < 13.5){

						int yx, yy;

						float averageY, blackPixelRtioY;
					//	Mat histogramY = Mat(Size(plateCanditate.cols, plateCanditate.rows), CV_8UC3, Scalar(255, 255, 255));

						float sumY = 0;

						for (yy = 0; yy < binaryCanditate.rows; yy++){

							int blackY = 0;

							for (yx = 0; yx < binaryCanditate.cols; yx++){

								int intensity = binaryCanditate.at<uchar>(Point(yx, yy));
								if (intensity == 0){

									blackY += 1;

								}
							}

					//		line(histogramY, Point(0, yy), Point(blackY, yy), Scalar(255, 0, 0), 1);
							sumY += blackY;
						}

						 averageY = (float) sumY / plateCanditate.cols;
						 blackPixelRtioY = (float) (averageY / plateCanditate.cols) * 100.0;

						//cout << averageY << "(" << blackPixelRtioY << " % )" << endl;

						if (blackPixelRtioY > 10.0 && blackPixelRtioY < 12.5){

							for (int j = 0; j < 4; j++){

								line(rectanglesImage, rect_points[j], rect_points[(j + 1) % 4], color, 2, 8);
							}

						//	imshow("histogramX.jpg", histogramX);
						//	imshow("histogramY", histogramY);
							imshow("plateCanditate", plateCanditate);
						//	imshow("binaryCanditate", binaryCanditate);
							imwrite("plateCanditate.jpg", plateCanditate);
							imwrite("plateCanditateBinary.jpg", binaryCanditate);

							charBoundRect();

						}
				}

			}
		}

		namedWindow("Plate Detected Image", WINDOW_NORMAL | WINDOW_KEEPRATIO);
		imshow("Plate Detected Image", rectanglesImage);
}


void charBoundRect(){

	vector<vector<Point> > contours;
	Mat charImage(binaryCanditate);
	Mat char_output = charImage.clone();
	Mat canyCharImage;

	//equalizeHist(charImage, charImage);
	Canny(binaryCanditate, canyCharImage, 255, 3, 3);
	imshow("test", canyCharImage);

	// Find contours

	findContours(canyCharImage, contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, Point(0, 0));

	vector<vector<Point> > contours_poly(contours.size());
	vector<Rect> boundRect(contours.size());
	Scalar color = Scalar(255, 255, 0);

	//int fourDigitHeight = (float)canyCharImage.rows * 0.545;
	//int fourDigitWidth = (float)char_output.cols * 0.712;
	//int katakanaWidth = (float)canyCharImage.cols * 0.181;

	for (size_t i = 0; i < contours.size(); i++){
		approxPolyDP(Mat(contours[i]), contours_poly[i], 3, true);
		boundRect[i] = boundingRect(Mat(contours_poly[i]));

		float charXPointRatio = (float)boundRect[i].x / (float)canyCharImage.cols;
		float charRatio = (float)boundRect[i].width / (float)boundRect[i].height;


		if (charRatio > 0.2 && charRatio < 0.6 && boundRect[i].width > 5.0 && boundRect[i].height > 10.0){

			if (charXPointRatio > 0.658  && charXPointRatio < 0.918){

				Rect Digit(42, 36, 151, 63);
				digitRoi = char_output(Digit);
				imwrite("4_digit_number.jpg", digitRoi);

				Rect kana(6, 36, 36, 63);
				katakana = char_output(kana);
				imwrite("katakana.jpg", katakana);


				Rect riku(42, 0, 122, 36);
				rikuUnNum = char_output(riku);
				imwrite("rikuUnNum.jpg", rikuUnNum);

				rectangle(char_output, Point(42, 36), Point(193, 96), Scalar(0, 0, 255), 2, 8, 0);
				rectangle(char_output, Point(6, 36), Point(42, 96), Scalar(0, 0, 255), 2, 8, 0);
				rectangle(char_output, Point(42, 0), Point(160, 36), Scalar(0, 0, 255), 2, 8, 0);

				namedWindow("Final Result of Number Plate", WINDOW_AUTOSIZE);
				imshow("Final Result of Number Plate", char_output);

				//textReading();

			}
		}
	}


}


void textReading(){
	/*
	string digitText;
	
	tesseract::TessBaseAPI *ocr = new tesseract::TessBaseAPI();
	
	ocr->Init(NULL, "eng");

	Pix *textImage = pixRead("4_digit_number.jpg");
	ocr->SetImage(textImage);
	char *outPutTxt = ocr->GetUTF8Text();

	ocr->Clear();
	delete[] &outPutTxt;
	pixDestroy(&textImage);
	*/
	
	system("C:\\Tesseract-OCR\\tesseract.exe rikuUnNum.jpg rikuUnNum -l jpn -psm 7");
	system("C:\\Tesseract-OCR\\tesseract.exe 4_digit_number.jpg 4_digit_number -l eng -psm 7");
	system("C:\\Tesseract-OCR\\tesseract.exe katakana.jpg katakana -l jpn -psm 7");

	ifstream rikuNumText("rikuUnNum.txt");
	ifstream digitText("4_digit_number.txt");
	ifstream kanaText("katakana.txt");

	string fourNumber,katakanaText,rikuText;

	rikuNumText >> rikuText;
	digitText >> fourNumber;
	kanaText >> katakanaText;

	cout << rikuText << katakanaText << fourNumber << endl;

	putText(rectanglesImage, rikuText, Point(50, 30), FONT_HERSHEY_SIMPLEX, 0.8, Scalar(255, 255, 0), 2, 8, false);
	putText(rectanglesImage, katakanaText, Point(250, 30), FONT_HERSHEY_SIMPLEX, 0.8, Scalar(255, 255, 0), 2, 8, false);
	putText(rectanglesImage, fourNumber, Point(400,30), FONT_HERSHEY_SIMPLEX, 1.0, Scalar(255, 255, 0), 2, 8, false);
	

}
