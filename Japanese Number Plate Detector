#include <iostream>
#include <opencv2\core\core.hpp>
#include <opencv2\highgui\highgui.hpp>
#include <opencv2\opencv.hpp>
#include <opencv2\imgproc\imgproc.hpp>
#include <vector>

using namespace cv;
using namespace std;

void connectIpCamera();
int readImage();
void convertGrayscale();
void morphologyOperate1();
void morphologyOperate2();
void dilationImage();
void sobelOperate();
void binaryOtsuImage();
void countRowsCols();
void countBlackPixelsX();
void countBlackPixelsY();
void findingContours();
void mergeImage();

VideoCapture capture;
Mat original_image;
Mat grayscaleimage;
Mat binary1,binary2, equalize;
Mat temp_img, sobelImage;
Mat binaryOtsu;
Mat morpho,resultMerge,binaryInverted;
Mat firstMerge,binaryMerged;


int main(int argc, char *argv[]){

	connectIpCamera();

	for (;;){

		readImage();

		convertGrayscale();

//		countRowsCols();

//		morphologyOperate1();

//		morphologyOperate2();

		binaryOtsuImage();

	 	sobelOperate();

		mergeImage();

//		dilationImage();

		findingContours();

		if (waitKey(1) >= 0) break;

	}

	waitKey(0);

	destroyAllWindows();

	return 0;
}


void connectIpCamera(){

	string uname = "root";
	string password = "****";
	string ip_address = "http://" + uname + ":" + password + "@169.254.***.1/mjpg/video.mjpg";

	if (capture.open(ip_address) == false) {
		cout << "Cannot connect IP camera! Check Your Camera Connection." << endl;
		waitKey();
	}
}

int readImage(){
	if (capture.read(original_image) == false){
		return -1;
	}
}

void countRowsCols(){
	cout << grayscaleimage.rows << endl;
	cout << grayscaleimage.cols << endl;
}

void morphologyOperate1(){
	Mat morphoImage = imread("morphology_img.jpg");
	threshold(morphoImage, binary1, 170, 255, CV_THRESH_BINARY);
	bitwise_not(binary1,binaryInverted);
	imshow("binaryInverted", binaryInverted);
	imshow("binary1", binary1);
}

void morphologyOperate2(){
	Mat morphoImage = imread("morphology_img.jpg");
	threshold(morphoImage, binary2, 200, 255, CV_THRESH_BINARY);
	bitwise_not(binary2, binaryInverted);
	imshow("binaryInverted", binaryInverted);
	imshow("binary2", binary2);

}
void dilationImage(){
	
	int morph_size = 5;
	Mat element = getStructuringElement(MORPH_RECT, Size(2 * morph_size + 1, 2 * morph_size + 1), Point(morph_size, morph_size));
	morphologyEx(binaryMerged, morpho, MORPH_DILATE, element, Point(-1, -1));
	imshow("morpho", morpho);
//	imwrite("morphology_img.jpg", morpho);
}

void convertGrayscale(){

	cvtColor(original_image, grayscaleimage, CV_BGR2GRAY);
	equalizeHist(grayscaleimage, equalize);
//	imshow("gray image", grayscaleimage);
//	imshow("equalize", equalize);
}

void sobelOperate(){

	Mat sobelImageX, sobelImageY;
	Sobel(grayscaleimage, temp_img, CV_16S, 1, 0, 3, 1, 0, BORDER_DEFAULT);
	convertScaleAbs(temp_img, sobelImageX, 1, 1);

	Sobel(grayscaleimage, temp_img, CV_16S, 0, 1, 3, 1, 0, BORDER_DEFAULT);
	convertScaleAbs(temp_img, sobelImageY, 1, 1);

	addWeighted(sobelImageX, 0.5, sobelImageY, 0.5, 0, sobelImage);

	imshow("sobel", sobelImage);
}


void binaryOtsuImage(){

	threshold(equalize, binaryOtsu, 128, 255, CV_THRESH_BINARY | CV_THRESH_OTSU);
	imshow("otsu", binaryOtsu);
}


void mergeImage(){

	Mat firstMerge = binaryOtsu.clone();
	Mat resultMerge = (firstMerge | sobelImage);
	threshold(resultMerge, binaryMerged, 90, 255, CV_THRESH_BINARY);
	imshow("merged_image",  binaryMerged);
}


void findingContours(){

	Mat canny_src = binaryMerged;

	Mat canny_output;

	vector<vector<Point> > contours;
	vector<Vec4i> hierarchy;

	Canny(canny_src, canny_output, 255, 3, 3);
	imshow("canny_image", canny_output);

	/// Find contours
	findContours(canny_output, contours, hierarchy, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_SIMPLE, Point(0, 0));

	vector<vector<Point> > contours_poly(contours.size());
	vector<Rect> boundRect(contours.size());
	vector<Point2f>center(contours.size());
	vector<float>radius(contours.size());

	Mat rectanglesImage = original_image.clone();
	Mat drawing = Mat::zeros(canny_output.size(), CV_8UC3);
	Scalar color = Scalar(255, 255, 0);



	for (size_t i = 0; i < contours.size(); i++){

		approxPolyDP(Mat(contours[i]), contours_poly[i], 3, true);
		boundRect[i] = boundingRect(Mat(contours_poly[i]));
		minEnclosingCircle(contours_poly[i], center[i], radius[i]);

		float aspectRatio = (float)boundRect[i].width / boundRect[i].height;

			if (boundRect[i].height > 40 && boundRect[i].width > 80 && aspectRatio > 1.85 && aspectRatio < 2.15){

//					drawContours(drawing, contours_poly, (int)i, color, 1, 8, vector<Vec4i>(), 0, Point());
					rectangle(drawing, boundRect[i].tl(), boundRect[i].br(), color, 1, 8, 0);
					rectangle(rectanglesImage, boundRect[i].tl(), boundRect[i].br(), color, 2, 8, 0);
//					circle(drawing, center[i], (int)radius[i], color, 2, 8, 0);

			}
        }
//	cout << contours.size() << endl;
//	imshow("Contours", drawing);
	imshow("contours_result", rectanglesImage);
}
void countBlackPixelsX(){
	int x, y;
	Mat histogramX = Mat(Size(binary1.cols, binary1.rows), CV_8UC3, Scalar(255, 255, 255));
	for (x = 0; x < binary1.cols; x++){
		int black = 0;
		for (y = 0; y < binary1.rows; y++){
			int intensity = binary1.at<uchar>(Point(x, y));
			if (intensity == 0){
				black += 1;
			}
		}
		line(histogramX, Point(x, 0), Point(x, black), Scalar(255, 0, 0), 1);
	}
	imshow("histogramX", histogramX);
}

void countBlackPixelsY(){
	int x, y;
	Mat histogramY = Mat(Size(binary1.cols, binary1.rows), CV_8UC3, Scalar(255, 255, 255));
	for (y = 0; y < binary1.rows; y++){
		int black = 0;
		for (x = 0; x < binary1.cols; x++){
			int intensity = binary1.at<uchar>(Point(x, y));
			if (intensity == 0){
				black += 1;
			}
		}
		line(histogramY, Point(0, y), Point(black, y), Scalar(255, 0, 0), 1);
	}
	imshow("histogramY", histogramY);
}
